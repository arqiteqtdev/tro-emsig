{"remainingRequest":"/Users/arqnet/Desktop/tro-emsig/node_modules/babel-loader/lib/index.js!/Users/arqnet/Desktop/tro-emsig/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/arqnet/Desktop/tro-emsig/src/store/modules/projects.js","dependencies":[{"path":"/Users/arqnet/Desktop/tro-emsig/src/store/modules/projects.js","mtime":1566455821000},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/cache-loader/dist/cjs.js","mtime":1615148347494},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/babel-loader/lib/index.js","mtime":1615147414521},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1615147417039}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHkiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kIjsKaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICIvVXNlcnMvYXJxbmV0L0Rlc2t0b3AvdHJvLWVtc2lnL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2hlbHBlcnMvZXNtL2RlZmluZVByb3BlcnR5IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbHRlciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lIjsKaW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9hcnFuZXQvRGVza3RvcC90cm8tZW1zaWcvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lLWNvcmVqczIvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CgpmdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfQoKZnVuY3Rpb24gX29iamVjdFNwcmVhZCh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307IGlmIChpICUgMikgeyBvd25LZXlzKE9iamVjdChzb3VyY2UpLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pOyB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSk7IH0gZWxzZSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gfSByZXR1cm4gdGFyZ2V0OyB9CgppbXBvcnQgeyBnZXRBbGxQcm9qZWN0cywgc2F2ZVByb2plY3QsIHVwZGF0ZVByb2plY3RCeUlkIH0gZnJvbSAiLi4vLi4vZGIvaW5kZXhlZERCIjsKZXhwb3J0IGRlZmF1bHQgewogIHN0YXRlOiB7CiAgICBwcm9qZWN0OiB7fSwKICAgIHByb2plY3RzOiBbXQogIH0sCiAgZ2V0dGVyczogewogICAgZ2V0UHJvamVjdHM6IGZ1bmN0aW9uIGdldFByb2plY3RzKHN0YXRlKSB7CiAgICAgIHJldHVybiBzdGF0ZTsKICAgIH0KICB9LAogIG11dGF0aW9uczogewogICAgU0VUX1BST0pFQ1Q6IGZ1bmN0aW9uIFNFVF9QUk9KRUNUKHN0YXRlLCBkYXRhKSB7CiAgICAgIHN0YXRlLnByb2plY3QgPSBkYXRhOwogICAgfSwKICAgIFNFVF9QUk9KRUNUUzogZnVuY3Rpb24gU0VUX1BST0pFQ1RTKHN0YXRlLCBkYXRhKSB7CiAgICAgIHN0YXRlLnByb2plY3RzID0gZGF0YTsKICAgIH0KICB9LAogIGFjdGlvbnM6IHsKICAgIGdldFByb2plY3RzOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0UHJvamVjdHMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoX3JlZikgewogICAgICAgIHZhciBjb21taXQsIHJlczsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBjb21taXQgPSBfcmVmLmNvbW1pdDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGdldEFsbFByb2plY3RzKCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgICByZXMgPSByZXMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBpLmlkICE9PSAnY3VycmVudFByb2plY3QnOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBjb21taXQoJ1NFVF9QUk9KRUNUUycsIHJlcyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRQcm9qZWN0cyhfeCkgewogICAgICAgIHJldHVybiBfZ2V0UHJvamVjdHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldFByb2plY3RzOwogICAgfSgpLAogICAgbmV3UHJvamVjdDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX25ld1Byb2plY3QgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKF9yZWYyLCBkYXRhKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgZGlzcGF0Y2gsIHN0YXRlLCByb290U3RhdGUsIHByb2plY3Q7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUyJChfY29udGV4dDIpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQyLnByZXYgPSBfY29udGV4dDIubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWYyLmNvbW1pdCwgZGlzcGF0Y2ggPSBfcmVmMi5kaXNwYXRjaCwgc3RhdGUgPSBfcmVmMi5zdGF0ZSwgcm9vdFN0YXRlID0gX3JlZjIucm9vdFN0YXRlOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goJ3Jlc2V0UHJvamVjdCcpOwogICAgICAgICAgICAgICAgcHJvamVjdCA9IHsKICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICdTaWduYXR1cmVUZW1wbGF0ZTEnLAogICAgICAgICAgICAgICAgICBiYXNpYzogX29iamVjdFNwcmVhZCh7fSwgcm9vdFN0YXRlLmJhc2ljKSwKICAgICAgICAgICAgICAgICAgb3B0aW9uczogX29iamVjdFNwcmVhZCh7fSwgcm9vdFN0YXRlLm9wdGlvbnMpLAogICAgICAgICAgICAgICAgICBhZGRvbnM6IHsKICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWQ6IFtdCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIHNvY2lhbHM6IHsKICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWQ6IFtdCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gc2F2ZVByb2plY3QocHJvamVjdCk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0Mi5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCgnZ2V0UHJvamVjdHMnKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgICAgX2NvbnRleHQyLm5leHQgPSA5OwogICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKCdzZXRQcm9qZWN0Jywgc3RhdGUucHJvamVjdHNbc3RhdGUucHJvamVjdHMubGVuZ3RoIC0gMV0pOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBuZXdQcm9qZWN0KF94MiwgX3gzKSB7CiAgICAgICAgcmV0dXJuIF9uZXdQcm9qZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBuZXdQcm9qZWN0OwogICAgfSgpLAogICAgaW1wb3J0UHJvamVjdDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ltcG9ydFByb2plY3QgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUzKF9yZWYzLCBkYXRhKSB7CiAgICAgICAgdmFyIHN0YXRlLCBjb21taXQsIGRpc3BhdGNoLCByb290U3RhdGU7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWUzJChfY29udGV4dDMpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQzLnByZXYgPSBfY29udGV4dDMubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjMuc3RhdGUsIGNvbW1pdCA9IF9yZWYzLmNvbW1pdCwgZGlzcGF0Y2ggPSBfcmVmMy5kaXNwYXRjaCwgcm9vdFN0YXRlID0gX3JlZjMucm9vdFN0YXRlOwogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHNhdmVQcm9qZWN0KGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBfY29udGV4dDMubmV4dCA9IDU7CiAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goJ2dldFByb2plY3RzJyk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgIF9jb250ZXh0My5uZXh0ID0gNzsKICAgICAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCgnc2V0UHJvamVjdCcsIGRhdGEpOwoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBpbXBvcnRQcm9qZWN0KF94NCwgX3g1KSB7CiAgICAgICAgcmV0dXJuIF9pbXBvcnRQcm9qZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbXBvcnRQcm9qZWN0OwogICAgfSgpLAogICAgdXBkYXRlUHJvamVjdDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX3VwZGF0ZVByb2plY3QgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KF9yZWY0LCBkYXRhKSB7CiAgICAgICAgdmFyIGNvbW1pdCwgZGlzcGF0Y2gsIHJvb3RTdGF0ZSwgYWRkb25zLCBpLCBzb2NpYWxzLCBfaSwgb3B0aW9ucywgcHJvamVjdDsKCiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIGNvbW1pdCA9IF9yZWY0LmNvbW1pdCwgZGlzcGF0Y2ggPSBfcmVmNC5kaXNwYXRjaCwgcm9vdFN0YXRlID0gX3JlZjQucm9vdFN0YXRlOwogICAgICAgICAgICAgICAgYWRkb25zID0gX29iamVjdFNwcmVhZCh7fSwgcm9vdFN0YXRlLmFkZG9ucyk7CgogICAgICAgICAgICAgICAgaWYgKGFkZG9ucy5pbnN0YWxsZWQubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoaSBpbiBhZGRvbnMpIHsKICAgICAgICAgICAgICAgICAgICBkZWxldGUgYWRkb25zW2ldOwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgc29jaWFscyA9IF9vYmplY3RTcHJlYWQoe30sIHJvb3RTdGF0ZS5zb2NpYWxzKTsKCiAgICAgICAgICAgICAgICBpZiAoc29jaWFscy5pbnN0YWxsZWQubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgIGZvciAoX2kgaW4gc29jaWFscykgewogICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBzb2NpYWxzW19pXTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBfb2JqZWN0U3ByZWFkKHt9LCByb290U3RhdGUub3B0aW9ucyk7CiAgICAgICAgICAgICAgICBkZWxldGUgb3B0aW9ucy5jb2xvci5tYWluUHJldmlldzsKICAgICAgICAgICAgICAgIGRlbGV0ZSBvcHRpb25zLmNvbG9yLnNlY29uZGFyeVByZXZpZXc7CiAgICAgICAgICAgICAgICBwcm9qZWN0ID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBkYXRhKSwge30sIHsKICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IHJvb3RTdGF0ZS50ZW1wbGF0ZS5zZWxlY3RlZCwKICAgICAgICAgICAgICAgICAgYWRkb25zOiBhZGRvbnMsCiAgICAgICAgICAgICAgICAgIHNvY2lhbHM6IHsKICAgICAgICAgICAgICAgICAgICBpbnN0YWxsZWQ6IHJvb3RTdGF0ZS5zb2NpYWxzLmluc3RhbGxlZAogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBiYXNpYzogX29iamVjdFNwcmVhZCh7fSwgcm9vdFN0YXRlLmJhc2ljKSwKICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDExOwogICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZVByb2plY3RCeUlkKHByb2plY3QpOwoKICAgICAgICAgICAgICBjYXNlIDExOgogICAgICAgICAgICAgICAgX2NvbnRleHQ0Lm5leHQgPSAxMzsKICAgICAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCgnZ2V0UHJvamVjdHMnKTsKCiAgICAgICAgICAgICAgY2FzZSAxMzoKICAgICAgICAgICAgICAgIGNvbW1pdCgnU0VUX1BST0pFQ1QnLCBkYXRhKTsKCiAgICAgICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNCk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIHVwZGF0ZVByb2plY3QoX3g2LCBfeDcpIHsKICAgICAgICByZXR1cm4gX3VwZGF0ZVByb2plY3QuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHVwZGF0ZVByb2plY3Q7CiAgICB9KCksCiAgICBzZXRQcm9qZWN0OiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfc2V0UHJvamVjdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTUoX3JlZjUsIGRhdGEpIHsKICAgICAgICB2YXIgY29tbWl0LCBkaXNwYXRjaDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTUkKF9jb250ZXh0NSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDUucHJldiA9IF9jb250ZXh0NS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgY29tbWl0ID0gX3JlZjUuY29tbWl0LCBkaXNwYXRjaCA9IF9yZWY1LmRpc3BhdGNoOwogICAgICAgICAgICAgICAgZGlzcGF0Y2goJ3Jlc2V0UHJvamVjdCcpOyAvLyBGYWxsYmFjayB0byBzZXQgY29ycmVjdCBuYW1lIG9mIHNpZ25hdHVyZSB0ZW1wbGF0ZQogICAgICAgICAgICAgICAgLy8gVE9ETzogcmVtb3ZlIGxhdGVyCgogICAgICAgICAgICAgICAgaWYgKGRhdGEudGVtcGxhdGUgPT09ICdFbWFpbFRlbXBsYXRlMScpIHsKICAgICAgICAgICAgICAgICAgZGF0YS50ZW1wbGF0ZSA9ICdTaWduYXR1cmVUZW1wbGF0ZTEnOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGNvbW1pdCgnU0VUX1BST0pFQ1QnLCBkYXRhKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnU0VUX0JBU0lDX1NUQVRFJywgZGF0YS5iYXNpYyk7CiAgICAgICAgICAgICAgICBjb21taXQoJ1NFVF9PUFRJT05fU1RBVEUnLCBkYXRhLm9wdGlvbnMpOwogICAgICAgICAgICAgICAgY29tbWl0KCdTRVRfVEVNUExBVEVfU0VMRUNURUQnLCBkYXRhLnRlbXBsYXRlKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnU0VUX0FERE9OU19TVEFURScsIGRhdGEuYWRkb25zKTsKICAgICAgICAgICAgICAgIGNvbW1pdCgnU0VUX1NPQ0lBTF9TVEFURScsIGRhdGEuc29jaWFscyk7CiAgICAgICAgICAgICAgICBfY29udGV4dDUubmV4dCA9IDExOwogICAgICAgICAgICAgICAgcmV0dXJuIHNhdmVQcm9qZWN0KHsKICAgICAgICAgICAgICAgICAgaWQ6ICdjdXJyZW50UHJvamVjdCcsCiAgICAgICAgICAgICAgICAgIHByb2plY3RJZDogZGF0YS5pZAogICAgICAgICAgICAgICAgfSwgdHJ1ZSk7CgogICAgICAgICAgICAgIGNhc2UgMTE6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDUuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTUpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBzZXRQcm9qZWN0KF94OCwgX3g5KSB7CiAgICAgICAgcmV0dXJuIF9zZXRQcm9qZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBzZXRQcm9qZWN0OwogICAgfSgpLAogICAgc2V0Q3VycmVudFByb2plY3Q6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9zZXRDdXJyZW50UHJvamVjdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTYoX3JlZjYpIHsKICAgICAgICB2YXIgc3RhdGUsIGNvbW1pdCwgZGlzcGF0Y2gsIHJlcywgcHJvamVjdDsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZTYkKF9jb250ZXh0NikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDYucHJldiA9IF9jb250ZXh0Ni5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgc3RhdGUgPSBfcmVmNi5zdGF0ZSwgY29tbWl0ID0gX3JlZjYuY29tbWl0LCBkaXNwYXRjaCA9IF9yZWY2LmRpc3BhdGNoOwogICAgICAgICAgICAgICAgX2NvbnRleHQ2Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGdldEFsbFByb2plY3RzKCk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIHJlcyA9IF9jb250ZXh0Ni5zZW50OwogICAgICAgICAgICAgICAgcmVzID0gcmVzLmZpbmQoZnVuY3Rpb24gKGkpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuaWQgPT09ICdjdXJyZW50UHJvamVjdCc7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHByb2plY3QgPSBzdGF0ZS5wcm9qZWN0cy5maW5kKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtLmlkID09PSByZXMucHJvamVjdElkOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgaWYgKHByb2plY3QpIHsKICAgICAgICAgICAgICAgICAgZGlzcGF0Y2goJ3NldFByb2plY3QnLCBwcm9qZWN0KTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIGRpc3BhdGNoKCdzZXRQcm9qZWN0Jywgc3RhdGUucHJvamVjdHNbMF0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBjYXNlIDc6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBzZXRDdXJyZW50UHJvamVjdChfeDEwKSB7CiAgICAgICAgcmV0dXJuIF9zZXRDdXJyZW50UHJvamVjdC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gc2V0Q3VycmVudFByb2plY3Q7CiAgICB9KCksCiAgICBhZGRJbml0aWFsUHJvamVjdDogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2FkZEluaXRpYWxQcm9qZWN0ID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlNyhfcmVmNykgewogICAgICAgIHZhciBzdGF0ZSwgZGlzcGF0Y2g7CiAgICAgICAgcmV0dXJuIHJlZ2VuZXJhdG9yUnVudGltZS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU3JChfY29udGV4dDcpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ3LnByZXYgPSBfY29udGV4dDcubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHN0YXRlID0gX3JlZjcuc3RhdGUsIGRpc3BhdGNoID0gX3JlZjcuZGlzcGF0Y2g7CiAgICAgICAgICAgICAgICBfY29udGV4dDcubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZGlzcGF0Y2goJ2dldFByb2plY3RzJyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGlmICghKHN0YXRlLnByb2plY3RzLmxlbmd0aCA9PT0gMCkpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMDsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSA2OwogICAgICAgICAgICAgICAgcmV0dXJuIGRpc3BhdGNoKCduZXdQcm9qZWN0Jyk7CgogICAgICAgICAgICAgIGNhc2UgNjoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gODsKICAgICAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCgnc2V0UHJvamVjdCcsIHN0YXRlLnByb2plY3RzWzBdKTsKCiAgICAgICAgICAgICAgY2FzZSA4OgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgICAgICBjYXNlIDEwOgogICAgICAgICAgICAgICAgX2NvbnRleHQ3Lm5leHQgPSAxMjsKICAgICAgICAgICAgICAgIHJldHVybiBkaXNwYXRjaCgnc2V0Q3VycmVudFByb2plY3QnKTsKCiAgICAgICAgICAgICAgY2FzZSAxMjoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0Ny5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGFkZEluaXRpYWxQcm9qZWN0KF94MTEpIHsKICAgICAgICByZXR1cm4gX2FkZEluaXRpYWxQcm9qZWN0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBhZGRJbml0aWFsUHJvamVjdDsKICAgIH0oKSwKICAgIHJlc2V0UHJvamVjdDogZnVuY3Rpb24gcmVzZXRQcm9qZWN0KF9yZWY4KSB7CiAgICAgIHZhciBzdGF0ZSA9IF9yZWY4LnN0YXRlLAogICAgICAgICAgY29tbWl0ID0gX3JlZjguY29tbWl0LAogICAgICAgICAgZGlzcGF0Y2ggPSBfcmVmOC5kaXNwYXRjaCwKICAgICAgICAgIHJvb3RTdGF0ZSA9IF9yZWY4LnJvb3RTdGF0ZTsKICAgICAgY29tbWl0KCdSRVNFVF9CQVNJQ19GSUVMRFMnKTsKICAgICAgY29tbWl0KCdSRVNFVF9PUFRJT05TJyk7CiAgICAgIGNvbW1pdCgnUkVTRVRfQURET05TJyk7CiAgICAgIGNvbW1pdCgnUkVTRVRfU09DSUFMJyk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["/Users/arqnet/Desktop/tro-emsig/src/store/modules/projects.js"],"names":["getAllProjects","saveProject","updateProjectById","state","project","projects","getters","getProjects","mutations","SET_PROJECT","data","SET_PROJECTS","actions","commit","res","filter","i","id","newProject","dispatch","rootState","template","basic","options","addons","installed","socials","length","importProject","updateProject","color","mainPreview","secondaryPreview","selected","setProject","projectId","setCurrentProject","find","item","addInitialProject","resetProject"],"mappings":"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","sourcesContent":["import {\n  getAllProjects,\n  saveProject,\n  updateProjectById\n} from '../../db/indexedDB'\n\nexport default {\n  state: {\n    project: {},\n    projects: []\n  },\n  getters: {\n    getProjects: state => state\n  },\n  mutations: {\n    SET_PROJECT (state, data) {\n      state.project = data\n    },\n    SET_PROJECTS (state, data) {\n      state.projects = data\n    }\n  },\n  actions: {\n    async getProjects ({ commit }) {\n      let res = await getAllProjects()\n      res = res.filter(i => i.id !== 'currentProject')\n      commit('SET_PROJECTS', res)\n    },\n    async newProject ({ commit, dispatch, state, rootState }, data) {\n      dispatch('resetProject')\n\n      const project = {\n        template: 'SignatureTemplate1',\n        basic: { ...rootState.basic },\n        options: { ...rootState.options },\n        addons: {\n          installed: []\n        },\n        socials: {\n          installed: []\n        }\n      }\n\n      await saveProject(project)\n      await dispatch('getProjects')\n      await dispatch('setProject', state.projects[state.projects.length - 1])\n    },\n    async importProject ({ state, commit, dispatch, rootState }, data) {\n      await saveProject(data)\n      await dispatch('getProjects')\n      await dispatch('setProject', data)\n    },\n    async updateProject ({ commit, dispatch, rootState }, data) {\n      const addons = { ...rootState.addons }\n\n      if (addons.installed.length === 0) {\n        for (let i in addons) {\n          delete addons[i]\n        }\n      }\n      const socials = { ...rootState.socials }\n      if (socials.installed.length === 0) {\n        for (let i in socials) {\n          delete socials[i]\n        }\n      }\n\n      const options = { ...rootState.options }\n      delete options.color.mainPreview\n      delete options.color.secondaryPreview\n\n      const project = {\n        ...data,\n        template: rootState.template.selected,\n        addons,\n        socials: {\n          installed: rootState.socials.installed\n        },\n        basic: { ...rootState.basic },\n        options\n      }\n\n      await updateProjectById(project)\n      await dispatch('getProjects')\n      commit('SET_PROJECT', data)\n    },\n    async setProject ({ commit, dispatch }, data) {\n      dispatch('resetProject')\n\n      // Fallback to set correct name of signature template\n      // TODO: remove later\n      if (data.template === 'EmailTemplate1') {\n        data.template = 'SignatureTemplate1'\n      }\n\n      commit('SET_PROJECT', data)\n      commit('SET_BASIC_STATE', data.basic)\n      commit('SET_OPTION_STATE', data.options)\n      commit('SET_TEMPLATE_SELECTED', data.template)\n      commit('SET_ADDONS_STATE', data.addons)\n      commit('SET_SOCIAL_STATE', data.socials)\n      await saveProject({ id: 'currentProject', projectId: data.id }, true)\n    },\n    async setCurrentProject ({ state, commit, dispatch }) {\n      let res = await getAllProjects()\n      res = res.find(i => i.id === 'currentProject')\n\n      const project = state.projects.find(item => item.id === res.projectId)\n\n      if (project) {\n        dispatch('setProject', project)\n      } else {\n        dispatch('setProject', state.projects[0])\n      }\n    },\n    async addInitialProject ({ state, dispatch }) {\n      await dispatch('getProjects')\n\n      if (state.projects.length === 0) {\n        await dispatch('newProject')\n        await dispatch('setProject', state.projects[0])\n      } else {\n        await dispatch('setCurrentProject')\n      }\n    },\n    resetProject ({ state, commit, dispatch, rootState }) {\n      commit('RESET_BASIC_FIELDS')\n      commit('RESET_OPTIONS')\n      commit('RESET_ADDONS')\n      commit('RESET_SOCIAL')\n    }\n  }\n}\n"]}]}