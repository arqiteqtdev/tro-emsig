{"remainingRequest":"/Users/arqnet/Desktop/tro-emsig/node_modules/babel-loader/lib/index.js!/Users/arqnet/Desktop/tro-emsig/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arqnet/Desktop/tro-emsig/src/components/Upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/arqnet/Desktop/tro-emsig/src/components/Upload.vue","mtime":1566455821000},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/cache-loader/dist/cjs.js","mtime":1615148347494},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/babel-loader/lib/index.js","mtime":1615147414521},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/cache-loader/dist/cjs.js","mtime":1615148347494},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js","mtime":1615147418198}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"upload\">\n    <el-button\n      class=\"upload__btn\"\n      @click=\"openCropDialog\"\n    >Upload image</el-button>\n    <el-dialog\n      title=\"Upload and crop image\"\n      :visible.sync=\"showCropDialog\"\n    >\n      <div class=\"crop-preview-wrapper\">\n        <div\n          v-show=\"cropPreview\"\n          class=\"crop-preview\"\n        >\n          <img\n            ref=\"cropper\"\n            :src=\"cropPreview\"\n            alt=\"crop-preview\"\n          >\n        </div>\n      </div>\n      <el-upload\n        ref=\"upload\"\n        action=\"\"\n        :on-change=\"onChange\"\n        :http-request=\"onUpload\"\n        :before-upload=\"onBeforeUpload\"\n        :multiple=\"false\"\n        :show-file-list=\"false\"\n        :auto-upload=\"false\"\n      >\n        <div slot=\"trigger\">\n          <button\n            ref=\"uploadButton\"\n            style=\"display: none;\"\n          />\n        </div>\n        <div\n          v-if=\"cropPreview\"\n          class=\"aspect-ratio-buttons\"\n        >\n          <el-radio-group\n            v-model=\"aspectRatio\"\n            size=\"mini\"\n            @change=\"changeAspectRation\"\n          >\n            <el-radio-button :label=\"1\">1:1</el-radio-button>\n            <el-radio-button :label=\"4 / 3\">4:3</el-radio-button>\n            <el-radio-button :label=\"2 / 3\">2:3</el-radio-button>\n            <el-radio-button :label=\"16 / 9\">16:9</el-radio-button>\n            <el-radio-button :label=\"NaN\">Free</el-radio-button>\n          </el-radio-group>\n        </div>\n        <div class=\"upload-action\">\n          <el-button @click=\"$refs.uploadButton.click()\">Select image</el-button>\n          <el-button\n            v-if=\"cropPreview\"\n            type=\"success\"\n            @click=\"onUpload\"\n          >Save</el-button>\n        </div>\n      </el-upload>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport S3 from 'aws-sdk/clients/s3'\nimport { guid } from '@/util/helpers'\nimport Cropper from 'cropperjs'\nimport 'cropperjs/dist/cropper.css'\n\nexport default {\n  name: 'Upload',\n\n  props: {\n    cropWidth: {\n      type: Number,\n      default: null\n    },\n    cropHeight: {\n      type: Number,\n      default: null\n    },\n    quality: {\n      type: Number,\n      default: 0.9\n    }\n  },\n\n  data () {\n    return {\n      fileRaw: '',\n      showCropDialog: false,\n      cropper: undefined,\n      aspectRatio: NaN\n    }\n  },\n\n  computed: {\n    cropPreview () {\n      if (this.fileRaw) {\n        return URL.createObjectURL(this.fileRaw)\n      }\n    }\n  },\n\n  methods: {\n    onBeforeUpload (file) {\n      this.checkUploadedFile(file)\n    },\n    checkUploadedFile (file) {\n      const isJPG = file.type === 'image/jpeg'\n      const isPNG = file.type === 'image/png'\n\n      return new Promise((resolve, reject) => {\n        if (!isJPG && !isPNG) {\n          const message = 'Uploaded file should be a .jpg or .png.'\n\n          this.$message({ message, type: 'error' })\n          reject(new Error(message))\n        }\n\n        resolve(true)\n      })\n    },\n    async onChange (file, fileList) {\n      try {\n        await this.checkUploadedFile(file.raw)\n        this.fileRaw = file.raw\n        this.initCropper()\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    async onUpload (data) {\n      const url = await this.uploadToS3()\n      this.$emit('upload', url)\n      this.showCropDialog = false\n      this.fileRaw = ''\n    },\n    async uploadToS3 () {\n      const bucket = new S3({\n        accessKeyId: process.env.VUE_APP_AWS_S3_ID,\n        secretAccessKey: process.env.VUE_APP_AWS_S3_KEY,\n        region: process.env.VUE_APP_AWS_S3_REGION\n      })\n\n      const name = this.fileRaw.name\n      const ext = name.match(/.jpg|.jpeg|.png$/i)[0]\n      const date = new Date().toJSON().substr(0, 10)\n      const file = `${date}-${guid()}${ext}`\n      const key = `upload/${file}`\n      const croppedImage = await this.getCroppedImage()\n\n      return new Promise((resolve, reject) => {\n        bucket.putObject({\n          Bucket: process.env.VUE_APP_AWS_S3_BASKET,\n          Key: key,\n          ContentType: this.fileRaw.type,\n          Body: croppedImage.blob\n        }, (err, data) => {\n          if (err) return reject(err)\n          const res = process.env.VUE_APP_AWS_S3_URL + '/' + key\n          return resolve(res)\n        })\n      })\n    },\n    changeAspectRation (aspect) {\n      this.aspectRatio = aspect\n      this.cropper.setAspectRatio(this.aspectRatio)\n    },\n    getCroppedImage () {\n      return new Promise(resolve => {\n        this.cropper.getCroppedCanvas({\n          width: this.cropWidth,\n          height: this.cropHeight,\n          imageSmoothingQuality: 'medium'\n        }).toBlob(blob => {\n          resolve({\n            blob: blob,\n            url: URL.createObjectURL(blob)\n          })\n        }, this.fileRaw.type, this.quality)\n      })\n    },\n    openCropDialog () {\n      this.showCropDialog = true\n      this.$nextTick(() => {\n        this.initCropper()\n      })\n    },\n    initCropper () {\n      if (typeof this.cropper === 'object') {\n        this.cropper.destroy()\n      }\n      this.$nextTick(() => {\n        this.cropper = new Cropper(this.$refs.cropper, {\n          aspectRatio: this.aspect,\n          viewMode: 1,\n          autoCropArea: 1\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../assets/scss/variables.scss';\n\n.crop-preview-wrapper {\n   overflow: hidden;\n   padding-bottom: 5px;\n}\n.crop-preview {\n  padding: 2px 0;\n  max-height: 250px;\n  padding-bottom: 20px;\n  img {\n     max-width: 100%;\n  }\n  &__placeholder {\n    width: 100%;\n    height: 200px;\n    background-color: #eee;\n    border: 1px dashed $color-info;\n    border-radius: 3px;\n  }\n}\n.upload-action, .aspect-ratio-buttons {\n  text-align: center;\n}\n.aspect-ratio-buttons {\n  margin-bottom: 10px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}