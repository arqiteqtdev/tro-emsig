{"remainingRequest":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arqnet/Desktop/tro-emsig/src/views/Projects.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/arqnet/Desktop/tro-emsig/src/views/Projects.vue","mtime":1566455821000},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/css-loader/dist/cjs.js","mtime":1615148347552},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1615147418198},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/postcss-loader/src/index.js","mtime":1615147418333},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/sass-loader/dist/cjs.js","mtime":1615147421818},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/cache-loader/dist/cjs.js","mtime":1615148347494},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js","mtime":1615147418198}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnLi4vYXNzZXRzL3Njc3MvdmFyaWFibGVzJzsKCi5wcm9qZWN0LWFjdGlvbnMgewogIG1hcmdpbi10b3A6IDIwcHg7CiAgdGV4dC1hbGlnbjogcmlnaHQ7Cn0KLm5hbWUtYWN0aW9ucyB7CiAgcGFkZGluZzogMnB4IDNweDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogICsgLm5hbWUtYWN0aW9ucyB7CiAgICBtYXJnaW4tbGVmdDogMnB4OwogIH0KICAmLS1zdWNjZXNzIHsKICAgIGJhY2tncm91bmQtY29sb3I6ICRjb2xvci1zdWNjZXNzOwogICAgaSB7CiAgICAgIGNvbG9yOiAjZmZmOwogICAgfQogIH0KICAmLS1jYW5jZWwgewogICAgYmFja2dyb3VuZC1jb2xvcjogJGNvbG9yLWRhbmdlcjsKICAgIGkgewogICAgICBjb2xvcjogI2ZmZjsKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Projects.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwNA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Projects.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"projects\">\n    <el-table\n      v-loading=\"loading\"\n      :data=\"allProjects\"\n      size=\"small\"\n      @cell-mouse-enter=\"onHover\"\n    >\n      <el-table-column\n        label=\"Name\"\n        prop=\"name\"\n      >\n        <template slot-scope=\"scope\">\n          <span @click.stop=\"onEditName(scope.row)\">\n            <span v-if=\"clicked.id === scope.row.id\">\n              <el-row :gutter=\"10\">\n                <el-col :span=\"18\">\n                  <el-input\n                    v-model=\"clicked.name\"\n                    size=\"mini\"\n                  />\n                </el-col>\n                <el-col :span=\"6\">\n                  <div class=\"name-actions\">\n                    <span\n                      class=\"name-actions name-actions--success\"\n                      @click.stop=\"onUpdateName\"\n                    >\n                      <i class=\"el-icon-check\" />\n                    </span>\n                    <span\n                      class=\"name-actions name-actions--cancel\"\n                      @click.stop=\"clicked = {}\"\n                    >\n                      <i class=\"el-icon-close\" />\n                    </span>\n                  </div>\n                </el-col>\n              </el-row>\n            </span>\n            <span v-else>\n              <span v-if=\"projects.project.id === scope.row.id\">\n                <strong>{{ scope.row.name }}</strong>\n              </span>\n              <span v-else>{{ scope.row.name }}</span>\n            </span>\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        label=\"Actions\"\n        width=\"220\"\n      >\n        <template slot-scope=\"scope\">\n          <el-button\n            type=\"text\"\n            size=\"mini\"\n            @click=\"onLoad(scope.row)\"\n          >\n            Load\n            <i class=\"el-icon-upload2\" />\n          </el-button>\n          <el-button\n            type=\"text\"\n            size=\"mini\"\n            @click=\"download(scope.row)\"\n          >\n            Download\n            <i class=\"el-icon-download\" />\n          </el-button>\n          <el-button\n            type=\"text\"\n            size=\"mini\"\n            @click=\"onDelete(scope.row.id)\"\n          >\n            Delete\n            <i class=\"el-icon-delete\" />\n          </el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <div class=\"project-actions\">\n      <el-button\n        size=\"small\"\n        @click=\"onImportProject\"\n      >Import project</el-button>\n      <el-button\n        size=\"small\"\n        type=\"success\"\n        @click=\"onNew\"\n      >New project</el-button>\n      <input\n        ref=\"fileInput\"\n        style=\"display: none;\"\n        type=\"file\"\n        @change=\"onFileSelected\"\n      >\n    </div>\n    <div class=\"desc\">\n      <p>Your changes and your projects only get stored in your browser's cache. Clearing your browsing data will result in losing your projects.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\nimport { deleteProjectById } from '../db/indexedDB.js'\n\nexport default {\n  name: '',\n\n  data () {\n    return {\n      loading: false,\n      dbname: '',\n      version: 1,\n      db: '',\n      store: '',\n      index: '',\n      tx: '',\n      hovered: {},\n      clicked: {},\n      selectedFile: null\n    }\n  },\n\n  computed: {\n    ...mapState(['basic', 'options', 'template', 'projects']),\n    allProjects () {\n      return this.projects.projects.filter(item => item.id !== 'currentProject')\n    }\n  },\n\n  async created () {\n    this.$ga.page(this.$router)\n    this.$store.dispatch('getProjects')\n  },\n\n  methods: {\n    async onNew () {\n      await this.$store.dispatch('newProject')\n      this.gaEventClick('new project')\n    },\n    async onDelete (id) {\n      try {\n        await this.$confirm('This will permanently delete the file. Continue?', 'Warning', {\n          confirmButtonText: 'OK',\n          cancelButtonText: 'Cancel',\n          type: 'warning'\n        })\n        await deleteProjectById(id)\n        await this.$store.dispatch('getProjects')\n        this.gaEventClick('delete project')\n        if (this.projects.projects.length > 0) {\n          await this.$store.dispatch('setCurrentProject')\n        } else {\n          this.$store.dispatch('newProject')\n        }\n      } catch (err) {\n\n      }\n    },\n\n    async onLoad (project) {\n      this.$store.dispatch('setProject', project)\n      this.gaEventClick('load project')\n    },\n    onUpdate () {\n      this.$store.dispatch('updateProject', this.projects.project)\n    },\n    onHover (v) {\n      this.hovered = { ...v }\n    },\n    onEditName (v) {\n      this.clicked = { ...v }\n    },\n    onUpdateName () {\n      this.$store.dispatch('updateProject', this.clicked)\n      this.clicked = {}\n    },\n    download (project) {\n      const data = JSON.stringify(project)\n      // return alert(data)\n      const a = document.createElement('a')\n      const file = new Blob([data], { type: 'application/json' })\n      a.href = URL.createObjectURL(file)\n      a.download = project.name\n      a.dispatchEvent(\n        new MouseEvent(`click`, {\n          bubbles: true,\n          cancelable: true,\n          view: window\n        })\n      )\n      this.gaEventClick('download project')\n    },\n    onFileSelected (e) {\n      const file = e.target.files[0]\n      const fl = new FileReader()\n      fl.readAsText(file)\n      fl.onload = e => {\n        this.$store.dispatch('importProject', JSON.parse(e.target.result))\n        // Удаление загруженного файла из интупа\n        this.$refs.fileInput.value = ''\n      }\n    },\n    onImportProject () {\n      this.$refs.fileInput.click()\n      this.gaEventClick('import project')\n    }\n\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../assets/scss/variables';\n\n.project-actions {\n  margin-top: 20px;\n  text-align: right;\n}\n.name-actions {\n  padding: 2px 3px;\n  cursor: pointer;\n  border-radius: 2px;\n  + .name-actions {\n    margin-left: 2px;\n  }\n  &--success {\n    background-color: $color-success;\n    i {\n      color: #fff;\n    }\n  }\n  &--cancel {\n    background-color: $color-danger;\n    i {\n      color: #fff;\n    }\n  }\n}\n</style>\n"]}]}