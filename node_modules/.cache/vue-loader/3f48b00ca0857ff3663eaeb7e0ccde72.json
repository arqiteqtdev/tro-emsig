{"remainingRequest":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arqnet/Desktop/tro-emsig/src/components/Upload.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/arqnet/Desktop/tro-emsig/src/components/Upload.vue","mtime":1566455821000},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/css-loader/dist/cjs.js","mtime":1615148347552},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1615147418198},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/postcss-loader/src/index.js","mtime":1615147418333},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/sass-loader/dist/cjs.js","mtime":1615147421818},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/cache-loader/dist/cjs.js","mtime":1615148347494},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js","mtime":1615147418198}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCAnLi4vYXNzZXRzL3Njc3MvdmFyaWFibGVzLnNjc3MnOwoKLmNyb3AtcHJldmlldy13cmFwcGVyIHsKICAgb3ZlcmZsb3c6IGhpZGRlbjsKICAgcGFkZGluZy1ib3R0b206IDVweDsKfQouY3JvcC1wcmV2aWV3IHsKICBwYWRkaW5nOiAycHggMDsKICBtYXgtaGVpZ2h0OiAyNTBweDsKICBwYWRkaW5nLWJvdHRvbTogMjBweDsKICBpbWcgewogICAgIG1heC13aWR0aDogMTAwJTsKICB9CiAgJl9fcGxhY2Vob2xkZXIgewogICAgd2lkdGg6IDEwMCU7CiAgICBoZWlnaHQ6IDIwMHB4OwogICAgYmFja2dyb3VuZC1jb2xvcjogI2VlZTsKICAgIGJvcmRlcjogMXB4IGRhc2hlZCAkY29sb3ItaW5mbzsKICAgIGJvcmRlci1yYWRpdXM6IDNweDsKICB9Cn0KLnVwbG9hZC1hY3Rpb24sIC5hc3BlY3QtcmF0aW8tYnV0dG9ucyB7CiAgdGV4dC1hbGlnbjogY2VudGVyOwp9Ci5hc3BlY3QtcmF0aW8tYnV0dG9ucyB7CiAgbWFyZ2luLWJvdHRvbTogMTBweDsKfQo="},{"version":3,"sources":["Upload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkNA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Upload.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"upload\">\n    <el-button\n      class=\"upload__btn\"\n      @click=\"openCropDialog\"\n    >Upload image</el-button>\n    <el-dialog\n      title=\"Upload and crop image\"\n      :visible.sync=\"showCropDialog\"\n    >\n      <div class=\"crop-preview-wrapper\">\n        <div\n          v-show=\"cropPreview\"\n          class=\"crop-preview\"\n        >\n          <img\n            ref=\"cropper\"\n            :src=\"cropPreview\"\n            alt=\"crop-preview\"\n          >\n        </div>\n      </div>\n      <el-upload\n        ref=\"upload\"\n        action=\"\"\n        :on-change=\"onChange\"\n        :http-request=\"onUpload\"\n        :before-upload=\"onBeforeUpload\"\n        :multiple=\"false\"\n        :show-file-list=\"false\"\n        :auto-upload=\"false\"\n      >\n        <div slot=\"trigger\">\n          <button\n            ref=\"uploadButton\"\n            style=\"display: none;\"\n          />\n        </div>\n        <div\n          v-if=\"cropPreview\"\n          class=\"aspect-ratio-buttons\"\n        >\n          <el-radio-group\n            v-model=\"aspectRatio\"\n            size=\"mini\"\n            @change=\"changeAspectRation\"\n          >\n            <el-radio-button :label=\"1\">1:1</el-radio-button>\n            <el-radio-button :label=\"4 / 3\">4:3</el-radio-button>\n            <el-radio-button :label=\"2 / 3\">2:3</el-radio-button>\n            <el-radio-button :label=\"16 / 9\">16:9</el-radio-button>\n            <el-radio-button :label=\"NaN\">Free</el-radio-button>\n          </el-radio-group>\n        </div>\n        <div class=\"upload-action\">\n          <el-button @click=\"$refs.uploadButton.click()\">Select image</el-button>\n          <el-button\n            v-if=\"cropPreview\"\n            type=\"success\"\n            @click=\"onUpload\"\n          >Save</el-button>\n        </div>\n      </el-upload>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport S3 from 'aws-sdk/clients/s3'\nimport { guid } from '@/util/helpers'\nimport Cropper from 'cropperjs'\nimport 'cropperjs/dist/cropper.css'\n\nexport default {\n  name: 'Upload',\n\n  props: {\n    cropWidth: {\n      type: Number,\n      default: null\n    },\n    cropHeight: {\n      type: Number,\n      default: null\n    },\n    quality: {\n      type: Number,\n      default: 0.9\n    }\n  },\n\n  data () {\n    return {\n      fileRaw: '',\n      showCropDialog: false,\n      cropper: undefined,\n      aspectRatio: NaN\n    }\n  },\n\n  computed: {\n    cropPreview () {\n      if (this.fileRaw) {\n        return URL.createObjectURL(this.fileRaw)\n      }\n    }\n  },\n\n  methods: {\n    onBeforeUpload (file) {\n      this.checkUploadedFile(file)\n    },\n    checkUploadedFile (file) {\n      const isJPG = file.type === 'image/jpeg'\n      const isPNG = file.type === 'image/png'\n\n      return new Promise((resolve, reject) => {\n        if (!isJPG && !isPNG) {\n          const message = 'Uploaded file should be a .jpg or .png.'\n\n          this.$message({ message, type: 'error' })\n          reject(new Error(message))\n        }\n\n        resolve(true)\n      })\n    },\n    async onChange (file, fileList) {\n      try {\n        await this.checkUploadedFile(file.raw)\n        this.fileRaw = file.raw\n        this.initCropper()\n      } catch (err) {\n        console.error(err)\n      }\n    },\n    async onUpload (data) {\n      const url = await this.uploadToS3()\n      this.$emit('upload', url)\n      this.showCropDialog = false\n      this.fileRaw = ''\n    },\n    async uploadToS3 () {\n      const bucket = new S3({\n        accessKeyId: process.env.VUE_APP_AWS_S3_ID,\n        secretAccessKey: process.env.VUE_APP_AWS_S3_KEY,\n        region: process.env.VUE_APP_AWS_S3_REGION\n      })\n\n      const name = this.fileRaw.name\n      const ext = name.match(/.jpg|.jpeg|.png$/i)[0]\n      const date = new Date().toJSON().substr(0, 10)\n      const file = `${date}-${guid()}${ext}`\n      const key = `upload/${file}`\n      const croppedImage = await this.getCroppedImage()\n\n      return new Promise((resolve, reject) => {\n        bucket.putObject({\n          Bucket: process.env.VUE_APP_AWS_S3_BASKET,\n          Key: key,\n          ContentType: this.fileRaw.type,\n          Body: croppedImage.blob\n        }, (err, data) => {\n          if (err) return reject(err)\n          const res = process.env.VUE_APP_AWS_S3_URL + '/' + key\n          return resolve(res)\n        })\n      })\n    },\n    changeAspectRation (aspect) {\n      this.aspectRatio = aspect\n      this.cropper.setAspectRatio(this.aspectRatio)\n    },\n    getCroppedImage () {\n      return new Promise(resolve => {\n        this.cropper.getCroppedCanvas({\n          width: this.cropWidth,\n          height: this.cropHeight,\n          imageSmoothingQuality: 'medium'\n        }).toBlob(blob => {\n          resolve({\n            blob: blob,\n            url: URL.createObjectURL(blob)\n          })\n        }, this.fileRaw.type, this.quality)\n      })\n    },\n    openCropDialog () {\n      this.showCropDialog = true\n      this.$nextTick(() => {\n        this.initCropper()\n      })\n    },\n    initCropper () {\n      if (typeof this.cropper === 'object') {\n        this.cropper.destroy()\n      }\n      this.$nextTick(() => {\n        this.cropper = new Cropper(this.$refs.cropper, {\n          aspectRatio: this.aspect,\n          viewMode: 1,\n          autoCropArea: 1\n        })\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../assets/scss/variables.scss';\n\n.crop-preview-wrapper {\n   overflow: hidden;\n   padding-bottom: 5px;\n}\n.crop-preview {\n  padding: 2px 0;\n  max-height: 250px;\n  padding-bottom: 20px;\n  img {\n     max-width: 100%;\n  }\n  &__placeholder {\n    width: 100%;\n    height: 200px;\n    background-color: #eee;\n    border: 1px dashed $color-info;\n    border-radius: 3px;\n  }\n}\n.upload-action, .aspect-ratio-buttons {\n  text-align: center;\n}\n.aspect-ratio-buttons {\n  margin-bottom: 10px;\n}\n</style>\n"]}]}