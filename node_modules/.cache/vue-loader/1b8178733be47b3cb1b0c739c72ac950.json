{"remainingRequest":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arqnet/Desktop/tro-emsig/src/views/Options.vue?vue&type=style&index=0&label=scss&lang=css&","dependencies":[{"path":"/Users/arqnet/Desktop/tro-emsig/src/views/Options.vue","mtime":1566455821000},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/css-loader/dist/cjs.js","mtime":1615148347552},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1615147418198},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/postcss-loader/src/index.js","mtime":1615147418333},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/cache-loader/dist/cjs.js","mtime":1615148347494},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js","mtime":1615147418198}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoub3B0aW9ucyB7CiAgbWFyZ2luLXRvcDogMzBweDsKfQo="},{"version":3,"sources":["Options.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoNA;AACA;AACA","file":"Options.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"options\">\n    <el-form\n      label-position=\"left\"\n      label-width=\"150px\"\n    >\n      <el-form-item label=\"Main color\">\n        <el-color-picker\n          ref=\"colorPicker\"\n          v-model=\"mainColor\"\n          @active-change=\"onPreviewMainColor\"\n        />\n      </el-form-item>\n      <el-form-item label=\"Secondary color\">\n        <el-color-picker\n          ref=\"colorPicker2\"\n          v-model=\"secondaryColor\"\n          @active-change=\"onPreviewSecondaryColor\"\n        />\n      </el-form-item>\n      <el-form-item label=\"Avatar\">\n        <el-switch v-model=\"showAvatar\" />\n      </el-form-item>\n      <el-collapse-transition>\n        <div v-if=\"showAvatar\">\n          <el-form-item label=\"Avatar size\">\n            <el-slider\n              v-model=\"avatarSize\"\n              :min=\"attributes.avatar.min\"\n              :max=\"attributes.avatar.max\"\n            />\n          </el-form-item>\n          <el-form-item label=\"Avatar shape\">\n            <el-select v-model=\"avatarShape\">\n              <el-option\n                v-for=\"item in attributes.avatar.roundness\"\n                :key=\"item.value\"\n                :label=\"item.label\"\n                :value=\"item.value\"\n                :disabled=\"item.label ==='Round' && !isImageSquare\"\n              />\n            </el-select>\n          </el-form-item>\n        </div>\n      </el-collapse-transition>\n      <el-form-item label=\"Font family\">\n        <el-select v-model=\"fontFamily\">\n          <el-option-group\n            v-for=\"group in attributes.font.family\"\n            :key=\"group.value\"\n            :label=\"group.label\"\n          >\n            <el-option\n              v-for=\"item in group.options\"\n              :key=\"item.value\"\n              :label=\"item.label\"\n              :value=\"item.value\"\n            />\n          </el-option-group>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"Font size\">\n        <el-select v-model=\"fontSize\">\n          <el-option\n            v-for=\"item in attributes.font.size\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          />\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"Job separator\">\n        <el-select v-model=\"separator\">\n          <el-option\n            v-for=\"item in attributes.separator.options\"\n            :key=\"item.value\"\n            :label=\"item.label\"\n            :value=\"item.value\"\n          />\n        </el-select>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n  name: '',\n\n  data () {\n    return {\n    }\n  },\n\n  computed: {\n    ...mapState(['options', 'attributes', 'projects', 'basic']),\n    mainColor: {\n      get () {\n        return this.options.color.main\n      },\n      set (v) {\n        this.$store.dispatch('updateOptions', { color: { main: v } })\n        this.$store.commit('SET_COLOR', { mainPreview: undefined })\n      }\n    },\n    secondaryColor: {\n      get () {\n        return this.options.color.secondary\n      },\n      set (v) {\n        this.$store.dispatch('updateOptions', { color: { secondary: v } })\n        this.$store.commit('SET_COLOR', { secondaryPreview: undefined })\n      }\n    },\n    fontSize: {\n      get () {\n        return this.options.font.size\n      },\n      set (v) {\n        this.$store.dispatch('updateOptions', { font: { size: v } })\n      }\n    },\n    fontFamily: {\n      get () {\n        return this.options.font.family\n      },\n      set (v) {\n        this.$store.dispatch('updateOptions', { font: { family: v } })\n      }\n    },\n    showAvatar: {\n      get () {\n        return this.options.avatar.show\n      },\n      set (v) {\n        this.$store.dispatch('updateOptions', { avatar: { show: v } })\n      }\n    },\n    avatarShape: {\n      get () {\n        return this.options.avatar.roundness\n      },\n      set (v) {\n        this.$store.dispatch('updateOptions', { avatar: { roundness: v } })\n      }\n    },\n    avatarSize: {\n      get () {\n        return this.options.avatar.size\n      },\n      set (v) {\n        this.$store.dispatch('updateOptions', { avatar: { size: v } })\n      }\n    },\n    separator: {\n      get () {\n        return this.options.separator\n      },\n      set (v) {\n        this.$store.dispatch('updateOptions', { separator: v })\n      }\n    },\n    isImageSquare () {\n      const img = document.createElement('img')\n      img.src = this.basic.image.link\n      return img.width === img.height\n    }\n  },\n\n  watch: {\n    'options.color.main' (v) {\n      if (v === null) this.$store.commit('SET_COLOR', { main: '#000000' })\n    },\n    'options.color.secondary' (v) {\n      if (v === null) this.$store.commit('SET_COLOR', { secondary: '#000000' })\n    }\n  },\n\n  created () {\n    this.$ga.page(this.$router)\n  },\n\n  mounted () {\n    this.onCloseColorPicker()\n  },\n\n  methods: {\n    onPreviewMainColor (v) {\n      this.$store.commit('SET_COLOR', { mainPreview: v })\n    },\n    onPreviewSecondaryColor (v) {\n      this.$store.commit('SET_COLOR', { secondaryPreview: v })\n    },\n    resetPreviewColor () {\n      this.$store.commit('SET_COLOR', { mainPreview: undefined })\n      this.$store.commit('SET_COLOR', { secondaryPreview: undefined })\n    },\n    onCloseColorPicker () {\n      this.$refs.colorPicker.$children[0].$on('input', e => {\n        if (!e) this.resetPreviewColor()\n      })\n      this.$refs.colorPicker2.$children[0].$on('input', e => {\n        if (!e) this.resetPreviewColor()\n      })\n    }\n  }\n}\n</script>\n\n<style label=\"scss\">\n.options {\n  margin-top: 30px;\n}\n</style>\n"]}]}