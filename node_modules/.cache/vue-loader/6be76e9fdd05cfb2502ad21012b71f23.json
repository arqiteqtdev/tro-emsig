{"remainingRequest":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/arqnet/Desktop/tro-emsig/src/views/FieldItem.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/arqnet/Desktop/tro-emsig/src/views/FieldItem.vue","mtime":1566455821000},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/css-loader/dist/cjs.js","mtime":1615148347552},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1615147418198},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/postcss-loader/src/index.js","mtime":1615147418333},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/sass-loader/dist/cjs.js","mtime":1615147421818},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/cache-loader/dist/cjs.js","mtime":1615148347494},{"path":"/Users/arqnet/Desktop/tro-emsig/node_modules/vue-loader/lib/index.js","mtime":1615147418198}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICcuLi9hc3NldHMvc2Nzcy92YXJpYWJsZXMnOwoKLmZpZWxkLXNldHRpbmdzIHsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgcmlnaHQ6IC0xMHB4OwogIHRvcDogNHB4OwogIGNvbG9yOiAkY29sb3ItaW5mbzsKICBjdXJzb3I6IHBvaW50ZXI7CiAgcGFkZGluZzogMTBweDsKICAmOmhvdmVyIHsKICAgIGNvbG9yOiAkY29sb3ItcHJpbWFyeTsKICB9Cn0KLnBvcG92ZXItcG9zIHsKICBwb3NpdGlvbjogcmVsYXRpdmU7CiAgdG9wOiAyMHB4Owp9Cg=="},{"version":3,"sources":["FieldItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0HA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FieldItem.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <el-form-item :label=\"name || 'No label'\">\n    <el-popover\n      v-model=\"popover\"\n      placement=\"top\"\n      title=\"Edit field\"\n      width=\"350\"\n      trigger=\"manual\"\n    >\n      <div>\n        <el-form size=\"small\">\n          <el-col :span=\"12\">\n            <el-form-item label=\"Label\">\n              <el-input v-model.trim=\"name\" />\n            </el-form-item>\n          </el-col>\n          <el-col :span=\"12\">\n            <el-form-item label=\"Type\">\n              <el-select\n                v-model=\"type\"\n                style=\"width:100%;\"\n              >\n                <el-option\n                  v-for=\"item in attributes.types\"\n                  :key=\"item.value\"\n                  :value=\"item.value\"\n                  :label=\"item.label\"\n                />\n              </el-select>\n            </el-form-item>\n          </el-col>\n          <el-col :span=\"24\">\n            <el-form-item style=\"text-align: right;\">\n              <el-button\n                type=\"danger\"\n                @click=\"onRemoveFiled\"\n              >Remove</el-button>\n              <el-button @click=\"popover = false\">Close</el-button>\n            </el-form-item>\n          </el-col>\n        </el-form>\n      </div>\n      <div\n        slot=\"reference\"\n        class=\"popover-pos\"\n      />\n    </el-popover>\n    <i\n      v-if=\"isAddonField\"\n      class=\"field-settings el-icon-setting\"\n      @click=\"onEdit\"\n    />\n    <el-input\n      v-model.trim=\"value\"\n      tabindex=\"1\"\n    />\n  </el-form-item>\n</template>\n\n<script>\nimport { mapState } from 'vuex'\n\nexport default {\n  name: '',\n\n  props: {\n    isAddonField: {\n      type: Boolean,\n      default: false\n    },\n    index: {\n      type: Number,\n      default: 0\n    }\n  },\n\n  data () {\n    return {\n      popover: false\n    }\n  },\n\n  computed: {\n    ...mapState(['basic', 'attributes']),\n    value: {\n      get () {\n        return this.basic.fields[this.index].value\n      },\n      set (v) {\n        this.$store.dispatch('updateField', { index: this.index, data: { value: v } })\n      }\n    },\n    name: {\n      get () {\n        return this.basic.fields[this.index].name\n      },\n      set (v) {\n        this.$store.dispatch('updateField', { index: this.index, data: { name: v } })\n      }\n    },\n    type: {\n      get () {\n        return this.basic.fields[this.index].type\n      },\n      set (v) {\n        this.$store.dispatch('updateField', { index: this.index, data: { type: v } })\n      }\n    }\n  },\n\n  methods: {\n    onEdit () {\n      this.popover = !this.popover\n    },\n    onRemoveFiled () {\n      this.$store.dispatch('removeField', this.index)\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\">\n@import '../assets/scss/variables';\n\n.field-settings {\n  position: absolute;\n  right: -10px;\n  top: 4px;\n  color: $color-info;\n  cursor: pointer;\n  padding: 10px;\n  &:hover {\n    color: $color-primary;\n  }\n}\n.popover-pos {\n  position: relative;\n  top: 20px;\n}\n</style>\n"]}]}